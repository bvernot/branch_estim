hey
install.packages('devtools')
install.packages('devtools')
devtools::load_all()
install.packages('here')
library(here)
options(width=200)
# install.packages('R.utils')
# install.packages('argparse')
library(argparse)
library(here)
# options(error=recover)
# options(error=NULL)
# create parser object
parser <- ArgumentParser()
parser$add_argument("-v", "--verbose", action="store_true", default=F,
help="Print extra output")
parser$add_argument("-nc", "--ncores", type='integer', default=1,
help="Number of cores to use. [not currently used?]")
parser$add_argument("-sims", "--sims.dat", required = T,
help="")
parser$add_argument("-gts", "--simple-gts", required=T,
help="all_simple_gts.tsv.gz")
parser$add_argument("-libs", "--libs", required=F,
help="One (or more, in the future) librarie to group together.")
parser$add_argument("-tag", "--tag", required=F, default='none',
help="One (or more, in the future) tags for this analysis.")
parser$add_argument("-niter", "--num-iters", type='integer', default=100,
help="Number of EM iterations")
parser$add_argument("-sites", "--site-cat", required=F, default = 'all',
help='Site categories to use [not currently implemented]')
parser$add_argument("-method", "--sim-method", required=F, default = 'simple',
help='Site categories to use [not currently implemented]')
parser$add_argument("-prefix", "--prefix", required=T,
help="Prefix for output files.")
if (interactive()) {
# args <- parser$parse_args(strsplit('-gts ~/Downloads/all_simple_gts.tsv.gz --sims ~/Documents/soil_dna_capture/sims.dat.RDS -libs A17273 --prefix what -nc 2', split = ' ')[[1]])
# args <- parser$parse_args(strsplit('-gts "~/GoogleDrive/branch_point_estimates/all_simple_gts.tsv.gz" --sims "~/GoogleDrive/branch_point_estimates/sims.dat.RDS" -libs A20281 --prefix what -nc 2 -sites all -tag hey', split = ' ')[[1]])
args <- parser$parse_args(strsplit('-gts ~/Downloads/all_simple_gts.small.tsv.gz --sims ~/Downloads/sims.dat.RDS -libs A20281 --prefix what -nc 2 -sites all -tag hey', split = ' ')[[1]])
args <- parser$parse_args(strsplit('-gts ~/Downloads/hey.gt.txt.gz --sims ~/Downloads/sims.dat.RDS --prefix what -nc 2 -sites all -tag hey', split = ' ')[[1]])
args <- parser$parse_args(strsplit('-gts ~/Downloads/test_sims_v_0.7601_ALL.gt.txt.gz --sims ~/Downloads/sims.dat.RDS --prefix what -nc 2 -sites all -tag hey', split = ' ')[[1]])
# args <- parser$parse_args(strsplit('--splits ~/Documents/index_cross_contam/data/ludovic/splitstats_ludovic_orlando_001.myformat3.txt -nhits 100 --prefix splitstats_ludovic_orlando_001 -nc 2 --sources 150', split = ' ')[[1]])
} else {
args <- parser$parse_args()
}
# library(ggplot2)
# library(data.table)
# library(dplyr)
# install.packages('cobs')
# library(cobs)
# library(foreach)
# install.packages('doParallel')
# library(doParallel)
#
# setDTthreads(1)
#
source(here('R/estim_branchpoints_fns.R'))
registerDoParallel(cores=args$ncores)
getDoParWorkers()
parser$add_argument("-add-contam", "--add-contam", type='float', default=0, nargs='+',
help="Number of EM iterations")
a = data.table(1)
a
rep(a, 10)
do.call(rbind, rep(a, 10))
do.call(rbind, lapply(1:10, function(x) a))
options(width=200)
# install.packages('R.utils')
# install.packages('argparse')
library(argparse)
library(here)
# options(error=recover)
# options(error=NULL)
# create parser object
parser <- ArgumentParser()
parser$add_argument("-v", "--verbose", action="store_true", default=F,
help="Print extra output")
parser$add_argument("-nc", "--ncores", type='integer', default=1,
help="Number of cores to use. [not currently used?]")
parser$add_argument("-sims", "--sims.dat", required = T,
help="")
parser$add_argument("-gts", "--simple-gts", required=T,
help="all_simple_gts.tsv.gz")
parser$add_argument("-libs", "--libs", required=F,
help="One (or more, in the future) librarie to group together.")
parser$add_argument("-tag", "--tag", required=F, default='none',
help="One (or more, in the future) tags for this analysis.")
parser$add_argument("-niter", "--num-iters", type='integer', default=100,
help="Number of EM iterations")
parser$add_argument("-add-contam", "--add-contam", type='double', default=0, nargs='+',
help="Artificially add contamination in these proportions")
parser$add_argument("-rg-props", "--rg-props", type='double', default=1, nargs='+',
help="Randomly split the simulations into read groups with these proportions")
parser$add_argument("-sites", "--site-cat", required=F, default = 'all',
help='Site categories to use [not currently implemented]')
parser$add_argument("-method", "--sim-method", required=F, default = 'simple',
help='Site categories to use [not currently implemented]')
parser$add_argument("-prefix", "--prefix", required=T,
help="Prefix for output files.")
if (interactive()) {
# args <- parser$parse_args(strsplit('-gts ~/Downloads/all_simple_gts.tsv.gz --sims ~/Documents/soil_dna_capture/sims.dat.RDS -libs A17273 --prefix what -nc 2', split = ' ')[[1]])
# args <- parser$parse_args(strsplit('-gts "~/GoogleDrive/branch_point_estimates/all_simple_gts.tsv.gz" --sims "~/GoogleDrive/branch_point_estimates/sims.dat.RDS" -libs A20281 --prefix what -nc 2 -sites all -tag hey', split = ' ')[[1]])
args <- parser$parse_args(strsplit('-gts ~/Downloads/all_simple_gts.small.tsv.gz --sims ~/Downloads/sims.dat.RDS -libs A20281 --prefix what -nc 2 -sites all -tag hey', split = ' ')[[1]])
args <- parser$parse_args(strsplit('-gts ~/Downloads/hey.gt.txt.gz --sims ~/Downloads/sims.dat.RDS --prefix what -nc 2 -sites all -tag hey', split = ' ')[[1]])
args <- parser$parse_args(strsplit('-gts ~/Downloads/test_sims_v_0.7601_ALL.gt.txt.gz --sims ~/Downloads/sims.dat.RDS --prefix what -nc 2 -sites all -tag hey', split = ' ')[[1]])
# args <- parser$parse_args(strsplit('--splits ~/Documents/index_cross_contam/data/ludovic/splitstats_ludovic_orlando_001.myformat3.txt -nhits 100 --prefix splitstats_ludovic_orlando_001 -nc 2 --sources 150', split = ' ')[[1]])
} else {
args <- parser$parse_args()
}
# library(ggplot2)
# library(data.table)
# library(dplyr)
# install.packages('cobs')
# library(cobs)
# library(foreach)
# install.packages('doParallel')
# library(doParallel)
#
# setDTthreads(1)
#
source(here('R/estim_branchpoints_fns.R'))
registerDoParallel(cores=args$ncores)
getDoParWorkers()
# sims.dat <- readRDS('~/Google Drive/branch_point_esimates/sims.dat.RDS')
sims.dat <- readRDS(args$sims.dat)
sims.dat <- add_linear_p_given_b_t_arcs(sims.dat, fixed_anc_p = 0.004)
# dt.sed.og <- fread('~/Google Drive/branch_point_esimates/all_simple_gts.tsv.gz')
# dt.sed.og <- fread('~/Downloads/all_simple_gts.tsv.gz')
dt.sed.og <- fread(args$simple_gts)
dt.sed <- data.table(dt.sed.og)
# ## set up simulated data, because I didn't previously fill this in
# dt.sed[, lib := 'sim009']
# setnames(dt.sed, c('sed', 'mh_f'), c('sed_gt', 'f_mh'))
dt.sed.poly.full <- dt.sed[!(v_gt == c_gt & v_gt == a_gt & v_gt == d_gt)]
# dt.sed.poly.full[, deam53 := rep(c(T,T,F,F,F), length.out = .N)]
# dt.sed.poly.full[, f_mh := f_mh / 99]
dt.sed.poly.full[, pos := NULL]
dt.sed.mh.full <- dt.sed[v_gt == c_gt & v_gt == a_gt & v_gt == d_gt & v_gt == 0 & f_mh > 0]
# dt.sed.mh.full[, deam53 := rep(c(T,T,F,F,F), length.out = .N)]
# dt.sed.mh.full[, f_mh := f_mh / 99]
dt.sed.mh.full[, pos := NULL]
options(width=200)
# install.packages('R.utils')
# install.packages('argparse')
library(argparse)
library(here)
# options(error=recover)
# options(error=NULL)
# create parser object
parser <- ArgumentParser()
parser$add_argument("-v", "--verbose", action="store_true", default=F,
help="Print extra output")
parser$add_argument("-nc", "--ncores", type='integer', default=1,
help="Number of cores to use. [not currently used?]")
parser$add_argument("-sims", "--sims.dat", required = T,
help="")
parser$add_argument("-gts", "--simple-gts", required=T,
help="all_simple_gts.tsv.gz")
parser$add_argument("-libs", "--libs", required=F,
help="One (or more, in the future) librarie to group together.")
parser$add_argument("-tag", "--tag", required=F, default='none',
help="One (or more, in the future) tags for this analysis.")
parser$add_argument("-niter", "--num-iters", type='integer', default=100,
help="Number of EM iterations")
parser$add_argument("-n-qc1", "--n-qc1", type='integer', default=1000,
help="Artificially add N QC sites that are DERIVED in all hominins. These are used for calculating faunal proportions, and have to be artificially added to simulated data.")
parser$add_argument("-n-qc0", "--n-qc0", type='integer', default=1000,
help="Artificially add N QC sites that are ANCESTRAL in all hominins. These are not present/useful in real data, so this should mostly be used for debugging.")
parser$add_argument("-add-contam", "--add-contam", type='double', default=0, nargs='+',
help="Artificially add contamination in these proportions")
parser$add_argument("-add-faunal", "--add-faunal", type='double', default=0, nargs='+',
help='Artificially add faunal "contamination" in these proportions')
parser$add_argument("-rg-props", "--rg-props", type='double', default=1, nargs='+',
help="Randomly split the simulations into read groups with these proportions")
parser$add_argument("-sites", "--site-cat", required=F, default = 'all',
help='Site categories to use [not currently implemented]')
parser$add_argument("-method", "--sim-method", required=F, default = 'simple',
help='Site categories to use [not currently implemented]')
parser$add_argument("-prefix", "--prefix", required=T,
help="Prefix for output files.")
if (interactive()) {
# args <- parser$parse_args(strsplit('-gts ~/Downloads/all_simple_gts.tsv.gz --sims ~/Documents/soil_dna_capture/sims.dat.RDS -libs A17273 --prefix what -nc 2', split = ' ')[[1]])
# args <- parser$parse_args(strsplit('-gts "~/GoogleDrive/branch_point_estimates/all_simple_gts.tsv.gz" --sims "~/GoogleDrive/branch_point_estimates/sims.dat.RDS" -libs A20281 --prefix what -nc 2 -sites all -tag hey', split = ' ')[[1]])
args <- parser$parse_args(strsplit('-gts ~/Downloads/all_simple_gts.small.tsv.gz --sims ~/Downloads/sims.dat.RDS -libs A20281 --prefix what -nc 2 -sites all -tag hey', split = ' ')[[1]])
args <- parser$parse_args(strsplit('-gts ~/Downloads/hey.gt.txt.gz --sims ~/Downloads/sims.dat.RDS --prefix what -nc 2 -sites all -tag hey', split = ' ')[[1]])
args <- parser$parse_args(strsplit('-gts ~/Downloads/test_sims_v_0.7601_ALL.gt.txt.gz --sims ~/Downloads/sims.dat.RDS --prefix what -nc 2 -sites all -tag hey', split = ' ')[[1]])
# args <- parser$parse_args(strsplit('--splits ~/Documents/index_cross_contam/data/ludovic/splitstats_ludovic_orlando_001.myformat3.txt -nhits 100 --prefix splitstats_ludovic_orlando_001 -nc 2 --sources 150', split = ' ')[[1]])
} else {
args <- parser$parse_args()
}
# library(ggplot2)
# library(data.table)
# library(dplyr)
# install.packages('cobs')
# library(cobs)
# library(foreach)
# install.packages('doParallel')
# library(doParallel)
#
# setDTthreads(1)
#
source(here('R/estim_branchpoints_fns.R'))
registerDoParallel(cores=args$ncores)
getDoParWorkers()
# sims.dat <- readRDS('~/Google Drive/branch_point_esimates/sims.dat.RDS')
sims.dat <- readRDS(args$sims.dat)
sims.dat <- add_linear_p_given_b_t_arcs(sims.dat, fixed_anc_p = 0.004)
# dt.sed.og <- fread('~/Google Drive/branch_point_esimates/all_simple_gts.tsv.gz')
# dt.sed.og <- fread('~/Downloads/all_simple_gts.tsv.gz')
dt.sed.og <- fread(args$simple_gts)
dt.sed <- data.table(dt.sed.og)
# ## set up simulated data, because I didn't previously fill this in
# dt.sed[, lib := 'sim009']
# setnames(dt.sed, c('sed', 'mh_f'), c('sed_gt', 'f_mh'))
dt.sed.poly.full <- dt.sed[!(v_gt == c_gt & v_gt == a_gt & v_gt == d_gt)]
# dt.sed.poly.full[, deam53 := rep(c(T,T,F,F,F), length.out = .N)]
# dt.sed.poly.full[, f_mh := f_mh / 99]
dt.sed.poly.full[, pos := NULL]
dt.sed.mh.full <- dt.sed[v_gt == c_gt & v_gt == a_gt & v_gt == d_gt & v_gt == 0 & f_mh > 0]
# dt.sed.mh.full[, deam53 := rep(c(T,T,F,F,F), length.out = .N)]
# dt.sed.mh.full[, f_mh := f_mh / 99]
dt.sed.mh.full[, pos := NULL]
dt.sed.qc.full <- foreach(my.lib = dt.sed.poly.full[, unique(lib)], .combine = rbind) %do% {
dt.sed.qc.full <- do.call(rbind, lapply(1:(args$n_qc0+args$n_qc1), function(x) dt.sed.poly.full[lib == my.lib][1]))
dt.sed.qc.full[, f_mh := 0]
dt.sed.qc.full[, mh := 0]
dt.sed.qc.full[, v_gt := 0]
dt.sed.qc.full[, c_gt := 0]
dt.sed.qc.full[, a_gt := 0]
dt.sed.qc.full[, d_gt := 0]
dt.sed.qc.full[, sed_gt := 0]
dt.sed.qc.full
}
dt.sed.qc.full
dt.sed.poly.full[, unique(lib)]
dt.sed.qc.full
do.call(rbind, lapply(1:(args$n_qc0+args$n_qc1), function(x) dt.sed.poly.full[lib == my.lib][1]))
